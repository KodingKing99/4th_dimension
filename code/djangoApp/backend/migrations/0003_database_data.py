# Generated by Django 3.2.8 on 2021-10-23 04:04

from django.db import migrations
import hashlib


class user_obj:
    def __init__(self, firstname, lastname, email, password, role, account):
        self.firstname = firstname
        self.lastname = lastname
        self.email = email
        self.role = role
        self.password = password
        self.account = account
def create_users(apps, schema_editor):
    """
    Creates a list of users to add to the database on build
    firstname is required,
    lastname demotes role, this is only true of test data
    email is firstname + @mail.com, this is only true with test data
    password == firstname to make it easy, again only true with test data
    the password must be hashed when added with a usersalt
    """
    user_list =[]
    # Append each user to create on build 
    user_list.append( user_obj('Jim', 'Player', 'Jim@mail.com', 'Jim', 1, 20))
    user_list.append( user_obj('James', 'Player', 'James@mail.com', 'James', 1, 20))
    user_list.append( user_obj('Jack', 'Player', 'Jack@mail.com','Jack', 1, 20))
    user_list.append( user_obj('Bigfoot', 'Drink', 'Bigfoot@mail.com','Bigfoot', 2, 20))
    user_list.append( user_obj('Batman', 'Drink', 'Batman@mail.com','Batman', 2, 20))
    user_list.append( user_obj('Worf', 'Manager', 'Worf@mail.com','Worf', 3, 20))
    user_list.append( user_obj('Picard', 'Sponsor', 'Picard@mail.com','Picard', 4, 20))
    user_list.append( user_obj('Bossman', 'Owner', 'Bossman@mail.com','Bossman', 5, 20))
    user_list.append( user_obj('Test', 'Dev', 'Test','Test', 6, 20))
    User = apps.get_model('backend', 'User')
    user_time_salt = "2021-10-22 22:14:36.000573"
    for user in user_list:
        User.objects.create(
            userfirstname = user.firstname,
            userlastname = user.lastname,
            useremail = user.email,
            usersalt = user.firstname + user_time_salt,
            userrole = user.role,
            useraccount = user.account,
            userpassword = hashlib.sha256(str(user.password).encode('Utf-8') + str(user.firstname + user_time_salt).encode('Utf-8')).hexdigest()
        )

class tournament_obj:
    def __init__(self, date_time, sponsor_id, prize, hole_count):
        self.date_time = date_time
        self.sponsor_id = sponsor_id
        self.prize = prize
        self.hole_count = hole_count
def create_tournaments(apps, schema_editor):
    """
    Create a couple default tournaments
    """
    tournament_list = []
    User = apps.get_model('backend', 'User')
    date_1 = "2021-10-31 10:00:00.000000"
    date_2 = "2021-11-14 18:00:00.000000"
    # Sponsor id defualts to first sponsor in database or if no sponosor then -1
    sponsor_id = User.objects.all().filter(userrole=4)[0].userid
    if not sponsor_id: sponsor_id = -1

    Tournament = apps.get_model('backend', 'Tournament')
    tournament_list.append( tournament_obj(date_1, sponsor_id, 2000, 18))
    tournament_list.append( tournament_obj(date_2, sponsor_id, 5000, 9))
    for tournament in tournament_list:
        Tournament.objects.create(
            tournamentdate = tournament.date_time,
            tournamentsponsor = tournament.sponsor_id,
            tournamentprize = tournament.prize,
            tournamentholecount = tournament.hole_count,
        )

class transactions_obj:
    def __init__(self, buyer_id, drink_meister_id, price, date_time, active_flag):
        self.buyer_id = buyer_id
        self.drink_meister_id = drink_meister_id
        self.price = price
        self.date_time = date_time
        self.active_flag = active_flag
def create_transactions(apps, schema_editor):
    """
    Create a few default transactions, ongoing and passed
    """
    transaction_list = []

    User = apps.get_model('backend', 'User')
    player_id = User.objects.all().filter(userrole=1)[0].userid
    drink_meister_id = User.objects.all().filter(userrole=2)[0].userid
    if not drink_meister_id: drink_meister_id = -1
    if not player_id: player_id = -1

    transaction_list.append( transactions_obj(player_id, drink_meister_id, 2.50, "2021-10-31 10:00:00.000000", True))
    transaction_list.append( transactions_obj(player_id, drink_meister_id, 2, "2021-10-30 10:00:00.000000", True))
    transaction_list.append( transactions_obj(player_id, drink_meister_id, 5, "2021-10-31 10:00:00.000000", True))
    transaction_list.append( transactions_obj(player_id, drink_meister_id, 3.75, "2021-10-30 10:00:00.000000", True))
    transaction_list.append( transactions_obj(player_id, drink_meister_id, 0, "2021-10-9 10:00:00.000000", False))
    transaction_list.append( transactions_obj(player_id, drink_meister_id, 1, "2021-10-8 10:00:00.000000", False))
    transaction_list.append( transactions_obj(player_id, drink_meister_id, 5.50, "2021-10-7 10:00:00.000000", False))
    transaction_list.append( transactions_obj(player_id, drink_meister_id, 3.23, "2021-10-6 10:00:00.000000", False))

    Transaction = apps.get_model('backend', 'Transactionhistory')
    for transaction in transaction_list:
        Transaction.objects.create(
            transactionprice = transaction.price,
            transactionbuyer = transaction.buyer_id,
            transactiondrinkmeister = transaction.drink_meister_id,
            transactiondate = transaction.date_time,
            transactionactiveflag = transaction.active_flag,
        )

class menu_obj:
    def __init__(self, name, price, image, description):
        self.name = name
        self.price = price
        self.image = image
        self.description = description
def create_menu(apps, schema_editor):
    """
    Create a few default transactions, ongoing and passed
    """
    menu_list = []

    menu_list.append( menu_obj("Coffee", 2.50, "local_cafe", "Piping hot coffee"))
    menu_list.append( menu_obj("Root Beer", 2, "emoji_food_beverage", "Ice cold root beer"))
    menu_list.append( menu_obj("Tea", 5, "sports_bar", "Soothing Tea"))
    menu_list.append( menu_obj("Coca-Cola", 3.75, "coffee_maker", "Classic coca-cola"))
    menu_list.append( menu_obj("Water", 0, "local_cafe", "Plain water with ice"))
    menu_list.append( menu_obj("Mountain Dew", 1, "local_cafe", "Liquid citric acid"))
    menu_list.append( menu_obj("Seltzer", 5.50, "seltzer", "Bubbly water"))

    Menu = apps.get_model('backend', 'Menu')
    for item in menu_list:
        Menu.objects.create(
            itemname = item.name,
            itemprice = item.price,
            itemimage = item.image,
            itemdescription = item.description,
        )

class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0002_user_usersalt'),
        # ('backend', '0004_transactionhistory_transactionactiveflag'),
    ]

    operations = [
        migrations.RunPython(create_users),
        migrations.RunPython(create_tournaments),
        migrations.RunPython(create_transactions),
        migrations.RunPython(create_menu),
    ]

